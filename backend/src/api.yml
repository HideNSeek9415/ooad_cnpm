openapi: 3.0.3
info:
  title: Stackoverflow - Document API
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:5000
tags:
  - name: account
    description: Everything about your Account
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: answer
    description: Operations related to Answers
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: bagde
    description: Operations related to Badge
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: comment
    description: Operations related to Comment
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: member
    description: Operations related to Members
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: question
    description: Operations related to Members
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: tag
    description: Operations related to Tags
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /account/login:
    post:
      tags:
        - account
      summary: Log in to your account
      description: Login to your account and receive a token in the Authorization header.
      operationId: login
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authorization.
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTQxNTYzLCJleHAiOjE3MjkxMTAzNjN9.3HvGMFzKrKxpXw0LIkAKqM4LR0ZNLl9d6rSXIVtVf_M'
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'tester'
                password:
                  type: string
                  example: '12345678'
              required:
                - username
                - password
        required: true
      responses:
        '200':
          description: Successful login with token in the Authorization header
          headers:
            Authorization:
              description: JWT token for accessing protected routes
              schema:
                type: string
                example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00ZmQ4LThkZGQtYm...
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '06b01d99-d0d5-4a34-86e4-89e13fa45e4f'
                  username:
                    type: string
                    example: 'tester'
                  password:
                    type: string
                    example: '$2b$10$dH0uuV3WXkAl2LaUbS9PnebW7.m7L9TzYDFEXzt4h8sW.x6u7LFdm'
                  status:
                    type: string
                    example: 'active'
                  registration_time:
                    type: string
                    format: date-time
                    example: 2024-09-19T17:33:40.000Z
                  Member:
                    type: object
                    properties:
                      id:
                        type: string
                        example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
        '401':
          description: Invalid username
        '500':
          description: Internal server error

  /account/register:
    post:
      summary: Register a new account and member
      description: Registers a new account and creates associated member information.
      tags:
        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                password:
                  type: string
                  example: TestPassword123!
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: johndoe@example.com
                phone:
                  type: string
                  example: 1234567890
                biography:
                  type: string
                  example: I am a software developer.
              required:
                - username
                - password
                - name
                - email
                - phone
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  accout_info:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cd186b10-7a07-456a-90da-d5e655369e48
                      status:
                        type: string
                        example: Active
                      registration_time:
                        type: string
                        format: date-time
                        example: 2024-10-10T03:46:43.153Z
                      username:
                        type: string
                        example: testuser
                      password:
                        type: string
                        example: $2b$10$8tJzeqap5zv4hh36hp5iU.f.sjGOCsuu/p05L6W5IBIz9yyQ8gerK
                  member_info:
                    type: object
                    properties:
                      id:
                        type: string
                        example: fb329d01-dd6e-4ee8-927e-2cdc1b373664
                      account_id:
                        type: string
                        example: cd186b10-7a07-456a-90da-d5e655369e48
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      phone:
                        type: string
                        example: 1234567890
                      reputation:
                        type: integer
                        example: 0
                      role:
                        type: string
                        example: Member
                      biography:
                        type: string
                        example: I am a software developer.
                      Account:
                        type: object
                        properties:
                          username:
                            type: string
                            example: testuser
                      Badges:
                        type: array
                        items:
                          type: string
                        example: []
        '400':
          description: Invalid input
        '500':
          description: Server error

  /account/changepassword:
    post:
      tags:
        - account
      summary: Change the password of an account
      description: Change the current password to a new password
      operationId: changePassword
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authorization.
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTQxNjI3LCJleHAiOjE3MjkxMTA0Mjd9.BtnNuRirDadvmUisMLRspFuuaYf0btx66RPBDfIKjvw'
      requestBody:
        required: true
        description: Input data to change the password
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  example: '12345678'
                new_password:
                  type: string
                  example: '12345678910'
              required:
                - current_password
                - new _password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Password changed successfully.'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Current password and new password are required.'
        '401':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Current password is incorrect.'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Internal server error'

  /answer/{id}:
    get:
      tags:
        - answer
      summary: Get answer by ID
      description: Retrieve an answer using its unique ID.
      operationId: getAnswerById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the answer.
          schema:
            type: string
            example: '9bf43411-77f8-49b2-beca-d8a27e728fa8'
      responses:
        '200':
          description: Successful retrieval of the answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '9bf43411-77f8-49b2-beca-d8a27e728fa8'
                  question_id:
                    type: string
                    example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                  member_id:
                    type: string
                    example: '11de0d38-be69-4fc2-8346-8cd266ee5cad'
                  answer_text:
                    type: string
                    example: 'History sport social mouth discover decision. Item off assume simply. His which blue gas keep democratic.'
                  accepted:
                    type: boolean
                    example: false
                  creation_time:
                    type: string
                    format: date-time
                    example: '2024-09-05T05:39:21.000Z'
                  voteCount:
                    type: integer
                    example: 0
                  flagCount:
                    type: integer
                    example: 0
        '404':
          description: Answer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Answer not found'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'An error occurred'

  /answer/question/{question_id}/create:
    post:
      tags:
        - answer
      summary: Create an answer
      description: Adds a new answer to a specified question.
      operationId: createAnswer
      parameters:
        - name: question_id
          in: path
          required: true
          description: The unique identifier of the question.
          schema:
            type: string
            example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authorization.
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTQxODk1LCJleHAiOjE3MjkxMTA2OTV9.iFDhLnHc3DPjh9veVxbrnu1s0ZtAu-ib_oVBbgDJyyc'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer_text:
                  type: string
                  example: 'Yes, exactly.'
                accepted:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Answer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '1481e7f9-978c-4bb0-a136-97923009d723'
                  question_id:
                    type: string
                    example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                  member_id:
                    type: string
                    example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                  answer_text:
                    type: string
                    example: 'Yes, exactly.'
                  accepted:
                    type: boolean
                    example: false
                  creation_time:
                    type: string
                    format: date-time
                    example: 2024-10-10T06:32:54.000Z
                  voteCount:
                    type: integer
                    example: 0
                  flagCount:
                    type: integer
                    example: 0
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'answer_text is required.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error creating answer'
                  error:
                    type: object
                    additionalProperties: true

  /answer/question/{question_id}:
    get:
      tags:
        - answer
      summary: Get answers for a specific question
      description: Retrieve a list of answers for a specified question by its ID.
      operationId: getAnswersByQuestionId
      parameters:
        - name: question_id
          in: path
          required: true
          description: The unique identifier of the question.
          schema:
            type: string
            example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
      responses:
        '200':
          description: A list of answers for the specified question
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '1481e7f9-978c-4bb0-a136-97923009d723'
                    question_id:
                      type: string
                      example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                    member_id:
                      type: string
                      example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                    answer_text:
                      type: string
                      example: 'Yes, exactly'
                    accepted:
                      type: boolean
                      example: false
                    creation_time:
                      type: string
                      format: date-time
                      example: '2024-10-10T06:32:54.000Z'
                    voteCount:
                      type: integer
                      example: 0
                    flagCount:
                      type: integer
                      example: 0
        '404':
          description: No answers found for the specified question
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No answers found for question_id: 05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error retrieving answers'
                  error:
                    type: object
                    additionalProperties: true

  /answer/{id}/correct:
    put:
      tags:
        - answer
      summary: Mark an answer as the correct answer
      description: Sets the answer with the specified ID as the correct answer for the question.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the answer to mark as correct
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiYzgxMTI1Y2ItOGJjZS00ZTViLWE3NjQtZDE2YTcxNTY5ZjJiIiwibWVtYmVyX2lkIjoiMDVjNDMzYTAtMDdjNi00M2FhLTkxNTMtYzRmMDFhNjM2MjE3IiwiaWF0IjoxNzI4NTQyNTYxLCJleHAiOjE3MjkxMTEzNjF9.pjdhq5U9Br0_ItEH-89bN2vtIENMb2O7zXyM2Th56Ss
      responses:
        200:
          description: Successfully marked as the correct answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Correct answer updated

  /comment/{id}:
    get:
      tags:
        - comment
      summary: 'Get comment by ID'
      description: 'Fetch a comment using its ID.'
      parameters:
        - in: path
          name: id
          example: '0c7b0b98-3a46-4e60-8516-fb7aa3f5b424'
          required: true
          schema:
            type: string
          description: 'ID of the comment'
      responses:
        '200':
          description: 'Successful response with comment data'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '0c7b0b98-3a46-4e60-8516-fb7aa3f5b424'
                  member_id:
                    type: string
                    example: '02103e79-208d-4f03-a04e-3ecc76ef0108'
                  question_id:
                    type: string
                    example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                  comment_text:
                    type: string
                    example: 'Small you city. Population great left here skin determine then.'
                  creation_time:
                    type: string
                    format: date-time
                    example: '2024-09-01T11:12:19.000Z'
                  flagCount:
                    type: integer
                    example: 0
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment not found'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Internal server error'
                  error:
                    type: string
                    example: 'Detailed error message'

  /comment/question/{question_id}:
    get:
      summary: 'Get comments by question ID'
      description: 'Fetch all comments associated with a specific question using the question ID.'
      tags:
        - comment
      parameters:
        - in: path
          name: question_id
          example: '399a6007-3641-47a8-ac9e-22bcae3a30b8'
          required: true
          schema:
            type: string
          description: 'ID of the question to get comments for'
      responses:
        '200':
          description: 'Successful response with a list of comments'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '060802df-4f19-4959-8f0b-123b556e214d'
                    member_id:
                      type: string
                      example: '30888fac-e79e-4a4c-8ebd-acaa3c14b8df'
                    question_id:
                      type: string
                      example: '399a6007-3641-47a8-ac9e-22bcae3a30b8'
                    comment_text:
                      type: string
                      example: 'Seat pattern add officer cost music assume little. Wait notice become its outside lead. Soldier tend machine budget gas.'
                    creation_time:
                      type: string
                      format: date-time
                      example: '2024-09-03T15:58:37.000Z'
                    flagCount:
                      type: integer
                      example: 0
        '404':
          description: 'No comments found for the given question ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No comments found'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Internal server error'
                  error:
                    type: string
                    example: 'Detailed error message'

  /comment/question/{question_id}/create:
    post:
      summary: 'Create a new comment for a question'
      description: 'Allows a member to create a new comment for a specific question.'
      tags:
        - comment
      parameters:
        - in: path
          name: question_id
          example: '399a6007-3641-47a8-ac9e-22bcae3a30b8'
          required: true
          schema:
            type: string
          description: 'ID of the question for which the comment is being created'
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTQ0MDU3LCJleHAiOjE3MjkxMTI4NTd9.meKmGnYikCraYcyoQuKqX0Mz15jvcK67DNImDW3VY18'
          description: 'JWT token for authorization'
      requestBody:
        description: 'Comment data that needs to be created'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_id:
                  type: string
                  example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                comment_text:
                  type: string
                  example: 'What are u doing ?'
      responses:
        '201':
          description: 'Comment created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 'ff6428a4-423b-4452-8170-34a9abf3600a'
                  member_id:
                    type: string
                    example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                  question_id:
                    type: string
                    example: '399a6007-3641-47a8-ac9e-22bcae3a30b8'
                  comment_text:
                    type: string
                    example: 'What are u doing ?'
                  creation_time:
                    type: string
                    format: date-time
                    example: '2024-10-10T07:12:39.000Z'
                  flagCount:
                    type: integer
                    example: 0
        '500':
          description: 'Error creating comment'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error creating comment'
                  error:
                    type: string
                    example: 'Detailed error message'

  /member/self:
    get:
      summary: 'Retrieve self member information'
      description: 'Fetches details of the authenticated member based on the token provided in the request header.'
      tags:
        - member
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTQ1MTM2LCJleHAiOjE3MjkxMTM5MzZ9.zmK2SqgJx6dC1ByD39ekseLvWjfbOBFAE7YGMuOs1sk'
          description: 'JWT token for authentication'
      responses:
        '200':
          description: 'Member information retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                  account_id:
                    type: string
                    example: '06b01d99-d0d5-4a34-86e4-89e13fa45e4f'
                  name:
                    type: string
                    example: 'HE HE HE'
                  email:
                    type: string
                    example: 'ief@igp.cls'
                  phone:
                    type: string
                    example: '0223112330'
                  reputation:
                    type: integer
                    example: 0
                  role:
                    type: string
                    example: 'Member'
                  biography:
                    type: string
                    example: '0'
                  Account:
                    type: object
                    properties:
                      username:
                        type: string
                        example: 'tester'
                  Badges:
                    type: array
                    items:
                      type: object
                    example: []
        '401':
          description: 'Unauthorized - Invalid or missing token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized - Invalid or missing token'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error retrieving member information'

  /member/all:
    get:
      summary: 'Retrieve all members'
      description: 'Fetches the details of all members including their badges.'
      tags:
        - member
      responses:
        '200':
          description: 'List of all members'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '02103e79-208d-4f03-a04e-3ecc76ef0108'
                    account_id:
                      type: string
                      example: '7cb0af33-557c-47c5-9d4a-f5da47fefb85'
                    name:
                      type: string
                      example: 'Rebecca Wood'
                    email:
                      type: string
                      example: 'cford@example.net'
                    phone:
                      type: string
                      example: '0621685414'
                    reputation:
                      type: integer
                      example: 45
                    role:
                      type: string
                      example: 'Member'
                    biography:
                      type: string
                      example: ''
                    Account:
                      type: object
                      properties:
                        username:
                          type: string
                          example: 'rushleslie'
                    Badges:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'ccf554b6-8d5b-4467-b29d-96d5a914566b'
                          name:
                            type: string
                            example: 'Người Đóng Góp Mới'
                          description:
                            type: string
                            example: 'Đạt được ít nhất 1 điểm uy tín (reputation) và đã đăng ít nhất 1 câu hỏi hoặc 1 câu trả lời.'
                          MemberBadge:
                            type: object
                            properties:
                              id:
                                type: string
                                example: '04dd3c04-2520-4f97-90bb-689d08a19725'
                              member_id:
                                type: string
                                example: '02103e79-208d-4f03-a04e-3ecc76ef0108'
                              badge_id:
                                type: string
                                example: 'ccf554b6-8d5b-4467-b29d-96d5a914566b'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error retrieving members'

  /member/update:
    put:
      summary: Update member information
      description: Update the details of a member by ID. Requires authentication via token in the header.
      tags:
        - member
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authorization.
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTU4MDUxLCJleHAiOjE3MjkxMjY4NTF9.ivVumIejwU776kGUXtsqW5iUtoChY-dANLg8ieB_-cI'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Donald Ziz'
                email:
                  type: string
                  example: 'ief@igp.cls'
                phone:
                  type: string
                  example: '0223112330'
                biography:
                  type: string
                  example: '0'
      responses:
        '200':
          description: Member updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '83fa14c7-70ae-4a4b-977e-bffa18ddf36f'
                  account_id:
                    type: string
                    example: '06b01d99-d0d5-4a34-86e4-89e13fa45e4f'
                  name:
                    type: string
                    example: 'Donald Ziz'
                  email:
                    type: string
                    example: 'ief@igp.cls'
                  phone:
                    type: string
                    example: '0223112330'
                  reputation:
                    type: integer
                    example: 0
                  role:
                    type: string
                    example: 'Member'
                  biography:
                    type: string
                    example: '0'
                  Account:
                    type: object
                    properties:
                      username:
                        type: string
                        example: 'tester'
                  Badges:
                    type: array
                    items:
                      type: object
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Member not found
        '500':
          description: Internal server error

  /member/save/{memberId}:
    post:
      tags:
        - member
      summary: Save member's question
      description: Save a question for the member specified by ID.
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authorization.
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NTU4MDUxLCJleHAiOjE3MjkxMjY4NTF9.ivVumIejwU776kGUXtsqW5iUtoChY-dANLg8ieB_-cI'
        - in: path
          name: memberId
          required: true
          schema:
            type: string
            example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
          description: The ID of the member for whom the question is being saved.
      responses:
        '200':
          description: Question saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Save question successful'
        '400':
          description: Invalid member ID
        '401':
          description: Unauthorized
        '404':
          description: Member not found
        '500':
          description: Internal server error

  /member/flag/question/{id}:
    post:
      tags:
        - member
      summary: Flag or unflag a question
      description: Flags or unflags a question based on the flag_type provided.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjExMjcyLCJleHAiOjE3MjkxODAwNzJ9.G3WsQCBGu2NTLJ3zEawC-z6cohMGlJiVk1aH36fPJ44'
          description: JWT token for authentication
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '28ce457b-6a98-4f55-9011-578e6c679fe7'
          description: The ID of the question to flag/unflag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag_type:
                  type: boolean
                  description: Set to `true` to flag, `false` to unflag
              required:
                - flag_type
            example:
              flag_type: true
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'flag/unflag successfully'
        '401':
          description: Unauthorized - Invalid or missing token

  /member/flag/comment/{id}:
    post:
      tags:
        - member
      summary: Flag or unflag a comment
      description: Flags or unflags a comment based on the flag_type provided.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjExMjcyLCJleHAiOjE3MjkxODAwNzJ9.G3WsQCBGu2NTLJ3zEawC-z6cohMGlJiVk1aH36fPJ44'
          description: JWT token for authentication
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '060802df-4f19-4959-8f0b-123b556e214d'
          description: The ID of the comment to flag/unflag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag_type:
                  type: boolean
                  description: Set to `true` to flag, `false` to unflag
              required:
                - flag_type
            example:
              flag_type: true
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'flag/unflag successfully'
        '401':
          description: Unauthorized - Invalid or missing token

  /member/flag/answer/{id}:
    post:
      tags:
        - member
      summary: Flag or unflag an answer
      description: Flags or unflags an answer based on the flag_type provided.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyMzE5LCJleHAiOjE3MjkxODExMTl9.eZXVVA0vHMJAxyep1TFRJ4eqZdhBhox5AZNufCA2KtI'
          description: JWT token for authentication
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '1481e7f9-978c-4bb0-a136-97923009d723'
          description: The ID of the answer to flag/unflag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag_type:
                  type: boolean
                  description: Set to `true` to flag, `false` to unflag
              required:
                - flag_type
            example:
              flag_type: true
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'flag/unflag successfully'
        '401':
          description: Unauthorized - Invalid or missing token

  /member/vote/question/{id}:
    post:
      tags:
        - member
      summary: Vote or unvote a question
      description: Cast a vote (upvote/downvote) or remove a vote for a question.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyNTAwLCJleHAiOjE3MjkxODEzMDB9.qNaBPrs6PyqxUE-HFk-q4BcT9rD0MmaSGPdOQIh1kEk
          description: JWT token for authentication
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '28ce457b-6a98-4f55-9011-578e6c679fe7'
          description: The ID of the question to vote/unvote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vote_type:
                  type: string
                  description: The type of vote, either 'Upvote' or 'Downvote' or 'Unvote'
                  enum: [Upvote, Downvote, Unvote]
              required:
                - vote_type
            example:
              vote_type: 'Upvote'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'vote/unvote successfully'
        '401':
          description: Unauthorized - Invalid or missing token

  /member/vote/answer/{id}:
    post:
      tags:
        - member
      summary: Vote or unvote an answer
      description: Cast a vote (upvote/downvote) or remove a vote for an answer.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyNTAwLCJleHAiOjE3MjkxODEzMDB9.qNaBPrs6PyqxUE-HFk-q4BcT9rD0MmaSGPdOQIh1kEk
          description: JWT token for authentication
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 9bf43411-77f8-49b2-beca-d8a27e728fa8
          description: The ID of the answer to vote/unvote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vote_type:
                  type: string
                  description: The type of vote, either 'Upvote' or 'Downvote' or 'Unvote'
                  enum: [Upvote, Downvote, Unvote]
              required:
                - vote_type
            example:
              vote_type: 'Upvote'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'vote/unvote successfully'
        '401':
          description: Unauthorized - Invalid or missing token

  /question/:
    get:
      tags:
        - question
      summary: Get a list of questions
      description: Retrieve all questions along with their associated tags, view count, vote count, and flag count.
      responses:
        '200':
          description: A list of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                    member_id:
                      type: string
                      example: '05c433a0-07c6-43aa-9153-c4f01a636217'
                    title:
                      type: string
                      example: 'Education right news dream base can anything.'
                    question_text:
                      type: string
                      example: "Effort fight power turn. Age others paper yourself option trade. Painting window attack.\nTeacher particularly quite choose open. Group each stock wide whether employee. Your economy every whether."
                    creation_time:
                      type: string
                      format: date-time
                      example: '2024-09-09T23:38:03.000Z'
                    update_time:
                      type: string
                      format: date-time
                      nullable: true
                      example: null
                    status:
                      type: string
                      example: 'Open'
                    closing_remark:
                      type: string
                      nullable: true
                      example: null
                    Tags:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'a9d4f188-a1a6-41b6-8e75-76bfb8bbca61'
                          name:
                            type: string
                            example: 'Python'
                          description:
                            type: string
                            example: 'Thảo luận về ngôn ngữ Python, bao gồm lập trình cơ bản, web, khoa học dữ liệu, và AI.'
                          QuestionTag:
                            type: object
                            properties:
                              id:
                                type: string
                                example: '23fdb39b-fb6d-49eb-9341-3b89b598517d'
                              question_id:
                                type: string
                                example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                              tag_id:
                                type: string
                                example: 'a9d4f188-a1a6-41b6-8e75-76bfb8bbca61'
                    viewCount:
                      type: integer
                      example: 2
                    voteCount:
                      type: integer
                      example: 0
                    flagCount:
                      type: integer
                      example: 0
        '401':
          description: Unauthorized - Invalid or missing token

  /question/{id}:
    get:
      tags:
        - question
      summary: Get a specific question by its ID
      description: Retrieve a question by its ID along with its associated tags, view count, vote count, and flag count.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the question
          schema:
            type: string
            example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
      responses:
        '200':
          description: The requested question
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                  member_id:
                    type: string
                    example: '05c433a0-07c6-43aa-9153-c4f01a636217'
                  title:
                    type: string
                    example: 'Education right news dream base can anything.'
                  question_text:
                    type: string
                    example: "Effort fight power turn. Age others paper yourself option trade. Painting window attack.\nTeacher particularly quite choose open. Group each stock wide whether employee. Your economy every whether."
                  creation_time:
                    type: string
                    format: date-time
                    example: '2024-09-09T23:38:03.000Z'
                  update_time:
                    type: string
                    format: date-time
                    nullable: true
                    example: null
                  status:
                    type: string
                    example: 'Open'
                  closing_remark:
                    type: string
                    nullable: true
                    example: null
                  Tags:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 'a9d4f188-a1a6-41b6-8e75-76bfb8bbca61'
                        name:
                          type: string
                          example: 'Python'
                        description:
                          type: string
                          example: 'Thảo luận về ngôn ngữ Python, bao gồm lập trình cơ bản, web, khoa học dữ liệu, và AI.'
                        QuestionTag:
                          type: object
                          properties:
                            id:
                              type: string
                              example: '23fdb39b-fb6d-49eb-9341-3b89b598517d'
                            question_id:
                              type: string
                              example: '05dcb34c-3c80-4a6a-afdd-30e567d9eb07'
                            tag_id:
                              type: string
                              example: 'a9d4f188-a1a6-41b6-8e75-76bfb8bbca61'
                  viewCount:
                    type: integer
                    example: 2
                  voteCount:
                    type: integer
                    example: 0
                  flagCount:
                    type: integer
                    example: 0
        '401':
          description: Unauthorized - Invalid or missing token

  /question/create:
    post:
      tags:
        - question
      summary: Create question
      description: Create a question with the provided data
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyNTAwLCJleHAiOjE3MjkxODEzMDB9.qNaBPrs6PyqxUE-HFk-q4BcT9rD0MmaSGPdOQIh1kEk
          description: JWT token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title for the question
                question_text:
                  type: string
                  description: Content of the question
                tags:
                  type: array
                  description: List of tags for the question
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID of the tag
              required:
                - title
                - question_text
            example:
              title: 'About JWT'
              question_text: 'Can someone explain how JWT works in terms of authentication and authorization?'
              tags:
                - id: '19899ab6-0bef-44fc-b55b-2db2fd6c7713'
                - id: '2c620291-aba3-410c-a3a7-416949ebba45'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '09239885-0630-4cad-82fc-27735408f97c'
                  member_id:
                    type: string
                    example: '948dba74-dc07-40f2-b659-910b6ac5a6d0'
                  title:
                    type: string
                    example: 'About JWT'
                  question_text:
                    type: string
                    example: 'I want to implement authentication using JWT in a Node.js application. Can someone help with an example?'
                  creation_time:
                    type: string
                    format: date-time
                    example: '2024-11-02T08:05:16.000Z'
                  update_time:
                    type: string
                    format: date-time
                    nullable: true
                    example: null
                  status:
                    type: string
                    example: 'Open'
                  closing_remark:
                    type: string
                    nullable: true
                    example: null
                  Tags:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: '2c620291-aba3-410c-a3a7-416949ebba45'
                        name:
                          type: string
                          example: 'Java/J2EE'
                        description:
                          type: string
                          example: 'Các vấn đề về ngôn ngữ Java và Java Enterprise Edition, tập trung vào phát triển ứng dụng doanh nghiệp và web.'
                  viewCount:
                    type: integer
                    example: 0
                  voteCount:
                    type: integer
                    example: 0
                  flagCount:
                    type: integer
                    example: 0
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid or missing token'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid request payload'

  /tag:
    get:
      tags:
        - tag
      summary: Get a list of tags
      description: Retrieve all tags with their details.
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '19899ab6-0bef-44fc-b55b-2db2fd6c7713'
                    name:
                      type: string
                      example: 'C/C++'
                    description:
                      type: string
                      example: 'Các câu hỏi về lập trình C và C++, bao gồm cú pháp, bộ nhớ, hiệu suất và quản lý tài nguyên.'
              example:
                - id: '19899ab6-0bef-44fc-b55b-2db2fd6c7713'
                  name: 'C/C++'
                  description: 'Các câu hỏi về lập trình C và C++, bao gồm cú pháp, bộ nhớ, hiệu suất và quản lý tài nguyên.'
                - id: '2c620291-aba3-410c-a3a7-416949ebba45'
                  name: 'Java/J2EE'
                  description: 'Các vấn đề về ngôn ngữ Java và Java Enterprise Edition, tập trung vào phát triển ứng dụng doanh nghiệp và web.'
                - id: '3368797f-bd13-46c4-a602-facb59b88c86'
                  name: 'JavaScript'
                  description: 'Câu hỏi về lập trình JavaScript, từ cơ bản đến nâng cao, bao gồm xử lý sự kiện, DOM, và JavaScript hiện đại (ES6+).'
                - id: 'a023d044-95a3-4953-939e-cfce47d27c18'
                  name: 'HTML, CSS'
                  description: 'Câu hỏi về định dạng và cấu trúc của trang web, giao diện người dùng, và thiết kế với HTML, CSS.'
                - id: 'a9d4f188-a1a6-41b6-8e75-76bfb8bbca61'
                  name: 'Python'
                  description: 'Thảo luận về ngôn ngữ Python, bao gồm lập trình cơ bản, web, khoa học dữ liệu, và AI.'
                - id: 'c620b32c-8a02-48f5-8090-e33f9e21e5f0'
                  name: 'C#/ASP.NET'
                  description: 'Các câu hỏi về ngôn ngữ C# và ASP.NET, framework của Microsoft cho phát triển ứng dụng web và doanh nghiệp.'
                - id: 'c7e1aa8a-833c-44fb-b164-239cdcd6270a'
                  name: 'Git/Github'
                  description: 'Vấn đề liên quan đến hệ thống quản lý phiên bản Git và nền tảng GitHub, bao gồm nhánh, merge và xung đột mã.'
                - id: 'd6248c1e-1985-45dd-8063-c71ff21b3e03'
                  name: 'Nodejs'
                  description: 'Các câu hỏi về Node.js, bao gồm tạo máy chủ, làm việc với API, và xây dựng ứng dụng RESTful.'
                - id: 'e069d464-efe5-4596-8dcc-170be32830fc'
                  name: 'JSON'
                  description: 'Thắc mắc về cách sử dụng JSON trong việc trao đổi dữ liệu, parse, và serialization.'
                - id: 'f7ef70bd-753f-496b-a476-430637fa1899'
                  name: 'API/Library'
                  description: 'Câu hỏi về việc sử dụng API và thư viện trong lập trình, bao gồm cách tích hợp và sử dụng chúng hiệu quả.'
                - id: 'f868e0e1-3c02-4031-b1b0-4ea842d36fa8'
                  name: 'Others'
                  description: 'Tag tổng quát cho những câu hỏi không thuộc về các chủ đề phổ biến khác.'
        '401':
          description: Unauthorized - Invalid or missing token
  /tag/{id}:
    get:
      tags:
        - tag
      summary: Get a specific tag by its ID
      description: Retrieve a tag by its ID along with its details.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag
          schema:
            type: string
            example: '19899ab6-0bef-44fc-b55b-2db2fd6c7713'
      responses:
        '200':
          description: The requested tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '19899ab6-0bef-44fc-b55b-2db2fd6c7713'
                  name:
                    type: string
                    example: 'C/C++'
                  description:
                    type: string
                    example: 'Các câu hỏi về lập trình C và C++, bao gồm cú pháp, bộ nhớ, hiệu suất và quản lý tài nguyên.'
        '401':
          description: Unauthorized - Invalid or missing token

  /tag/create:
    post:
      tags:
        - tag
      summary: Create tag
      description: Create a new tag with the provided data
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyNTAwLCJleHAiOjE3MjkxODEzMDB9.qNaBPrs6PyqxUE-HFk-q4BcT9rD0MmaSGPdOQIh1kEk
          description: JWT token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the tag
                description:
                  type: string
                  description: Description of the tag
              required:
                - name
                - description
            example:
              name: 'Reactjs'
              description: 'Lên gg mà search'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '601b7bdc-a521-4bca-984c-396b2e1076ea'
                  name:
                    type: string
                    example: 'Reactjs'
                  description:
                    type: string
                    example: 'Lên gg mà search'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid or missing token'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid request payload'
  /tag/update/{id}:
    put:
      tags:
        - tag
      summary: Update tag
      description: Update an existing tag by its ID with the provided data
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag to be updated
          schema:
            type: string
            example: 'd6248c1e-1985-45dd-8063-c71ff21b3e03'
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMDZiMDFkOTktZDBkNS00YTM0LTg2ZTQtODllMTNmYTQ1ZTRmIiwibWVtYmVyX2lkIjoiODNmYTE0YzctNzBhZS00YTRiLTk3N2UtYmZmYTE4ZGRmMzZmIiwiaWF0IjoxNzI4NjEyNTAwLCJleHAiOjE3MjkxODEzMDB9.qNaBPrs6PyqxUE-HFk-q4BcT9rD0MmaSGPdOQIh1kEk
          description: JWT token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the tag
                description:
                  type: string
                  description: New description of the tag
              required:
                - name
                - description
            example:
              name: 'Nodejs'
              description: 'Lên gg mà search wtf'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 'd6248c1e-1985-45dd-8063-c71ff21b3e03'
                  name:
                    type: string
                    example: 'Nodejs'
                  description:
                    type: string
                    example: 'Lên gg mà search wtf'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid or missing token'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid request payload'
        '404':
          description: Not Found - Tag with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Tag not found'

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
